services:

  reverse-proxy:
    image: "traefik:v2.3"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web-securise.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock"

  onion-service:
    build:
      context: .
      dockerfile: Dockerfile.tor 
    container_name: onion-service-container
    ports:
      - 8001:8000
    env_file:
      - .env.docker
    depends_on:
      database:
        condition: service_healthy

  web-service:
    build:
      context: .
      dockerfile: Dockerfile  
    container_name: standard-webpage-container
    ports:
      - 8000:8000
    env_file:
      - .env.docker
    depends_on:
      database:
        condition: service_healthy
    labels:
      - "traefik.http.routers.web-service.rule=Host(`sonpike.net`)"
      - "traefik.http.routers.web-service.entrypoints=web-securise"
      - "traefik.http.routers.web-service.tls=true"


  database:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env.docker
    ports:
      - "5431:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  db-data:

