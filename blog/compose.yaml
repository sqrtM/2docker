services:
  onion-service:
    build:
      context: .
      dockerfile: Dockerfile.tor  # Use your modified Dockerfile
    container_name: onion-service-container
    ports:
      - 8001:8000
    env_file:
      - .env.docker
    depends_on:
      database:
        condition: service_healthy

  web-service:
    build:
      context: .
      dockerfile: Dockerfile  # Use your modified Dockerfile
    container_name: standard-webpage-container
    ports:
      - 8000:8000
    env_file:
      - .env.docker
    depends_on:
      database:
        condition: service_healthy


  database:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env.docker
    ports:
      - "5431:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - logging-network
    ports:
      - "9200:9200"

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.5.0
    user: root
    depends_on:
      - elasticsearch
    volumes:
      - ./filebeat.yml:/var/filebeat/config/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - logging-network
    environment:
      - -strict.perms=false

  kibana:
    image: docker.elastic.co/kibana/kibana:7.5.0
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    networks:
      - logging-network
volumes:
  db-data:

networks:
  logging-network:
    name: "logging-network"

